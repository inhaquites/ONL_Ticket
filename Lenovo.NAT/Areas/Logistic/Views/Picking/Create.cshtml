@using Lenovo.NAT.ViewModel.Logistic.Picking
@model PickingViewModel
@{
    ViewData["Title"] = "New Picking Request";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>New Picking Request</h3>
<hr />

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

@using (Html.BeginForm("Save", "Picking", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.Id)

    <div class="alert">
        <span id="idAlert" style="display: none; background: red" class="closebtn" onclick="this.parentElement.style.display='none';"></span>
    </div>

    <div class="card" style="margin-bottom:10px">
        <h5 class="card-header" data-bs-toggle="collapse" href="#collapseOne" role="button" aria-expanded="true" aria-controls="collapseOne">Picking Details</h5>
        <div class="no-padding accordion-collapse collapse show" id="collapseOne">

            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Created On
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @readonly = true, @class = "form-control", @id = "createdOn" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Created By
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @readonly = true, @class = "form-control", @id = "createdBy" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Status
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingStatus, new { htmlAttributes = new { @readonly = true, @class = "form-control" } })
                        </div>
                    </div>

                </div>
            </div>

            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Responsible Area
                                </strong>
                            </p>
                            @Html.DropDownListFor(model => model.IdPickingArea, Model.Areas.Select(item => new SelectListItem
                   {
                       Value = item.Id.ToString(),
                       Text = item.Name
                   }), "Select", new { @class = "form-control", @id = "IdArea" })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Process Type
                                </strong>
                            </p>
                            @Html.DropDownListFor(model => model.IdPickingProcessType, Model.ProcessTypes.Select(item => new SelectListItem
                           {
                               Value = item.Id.ToString(),
                               Text = item.Name
                           }), "Select", new { @class = "form-control", @id = "IdProcessType" })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Process Number
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.Process, new { htmlAttributes = new { @class = "form-control", @id = "process" } })
                        </div>
                    </div>

                </div>
            </div>

            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Client
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.Client, new { htmlAttributes = new { @class = "form-control", @id = "client" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    City
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @id = "city" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    UF
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.UF, new { htmlAttributes = new { @class = "form-control", @id = "uf" } })
                        </div>
                    </div>


                </div>
            </div>

            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Contact
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.Contact, new { htmlAttributes = new { @class = "form-control", @id = "contact" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong> Email</strong>
                            </p>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "email" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Telephone
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control", @id = "telephone" } })
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Reason
                                </strong>
                            </p>
                            @Html.DropDownListFor(model => model.Reason, Model.Reasons.Select(item => new SelectListItem
                           {
                               Value = item.Name.ToString(),
                               Text = item.Name
                            }), "Select", new { @class = "form-control", @id = "reason" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card" style="margin-bottom:10px">
        <h5 class="card-header" data-bs-toggle="collapse" href="#collapseTwo" role="button" aria-expanded="true" aria-controls="collapseTwo">Attachments</h5>
        <div class="no-padding accordion-collapse collapse show" id="collapseTwo">
            <div class="card-body">
                <div class="row">

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Invoice Return
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingInvoice.InvoiceReturn, new { htmlAttributes = new { @class = "form-control", @id = "invoiceReturn" } })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Invoice Return Date
                                </strong>
                            </p>
                            <input class="form-control" asp-for="PickingInvoice.InvoiceReturnDate" asp-format="{0:dd/MM/yyyy}" id="invoiceReturnDate" />
                        </div>
                    </div>

                    <div class="col-sm-3">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Total Value
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingInvoice.TotalValue, new { htmlAttributes = new { @class = "form-control", @id = "totalValue" } })
                        </div>
                    </div>

                </div>

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Approval File
                                </strong>
                            </p>
                            @Html.TextBoxFor(model => model.PickingInvoice.ApprovalFile, new { type = "file", @class = "form-control", @id = "approvalFile" })
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Invoice Return File
                                </strong>
                            </p>
                            @Html.TextBoxFor(model => model.PickingInvoice.InvoiceReturn, new { type = "file", @class = "form-control", @id = "invoiceReturnFile" })
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Correction Letter File
                                </strong>
                            </p>
                            @Html.TextBoxFor(model => model.PickingInvoice.SeriesLetterFile, new { type = "file", @class = "form-control", @id = "seriesLetterFile" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Observation
                                </strong>
                            </p>
                            @Html.TextAreaFor(m => m.PickingInvoice.Observation, new { @class = "form-control", @id = "observation" })
                        </div>
                    </div>
                    <div class="col-sm-1" style="height:25px; margin-top: 63px">
                        <input name="command" value="Add" class="btn btn-primary form-control" id="btnAddInvoice" />
                    </div>
                </div>

                <br />
            </div>

            <div class="card-body">
                <div class="row" style="margin-top:10px">

                    <table class="table table-striped table-bordered" id="InvoiceListId">
                        <thead>
                            <tr>
                                <th scope="col">Invoice Return</th>
                                <th scope="col">Invoice Return Date</th>
                                <th scope="col">Approval File Name</th>
                                <th scope="col">Return File Name</th>
                                <th scope="col">Correction Letter File Name</th>
                                <th scope="col">Observation</th>
                                <th scope="col">Total Value</th>
                                <th scope="col">Remove Item</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.PickingInvoices.Any())
                            {
                                var line = 1;

                                var invoiceId = "invoice" + line;
                                var approvalFileId = "approvalFile" + line;

                                foreach (var item in Model.PickingInvoices)
                                {
                                    <tr id="@invoiceId">
                                        <td hidden>@item.Id</td>
                                        <td>@item.InvoiceReturn</td>
                                        <td>@item.InvoiceReturnDate.Date</td>
                                        <td hidden>@item.ApprovalFile</td>
                                        <td>
                                            @item.ApprovalFileName
                                            <a href="/ThinkTool/Logistic/Picking/DownloadApprovalFile/@item.Id">
                                                <img style="width: 20px;height: 20px" class="rounded" src="~/content/Images/dowload-icon.png" />
                                            </a>
                                        </td>
                                        <td hidden>@item.ReturnFile</td>
                                        <td>
                                            @item.ReturnFileName
                                            <a href="/ThinkTool/Logistic/Picking/DownloadReturnFile/@item.Id">
                                                <img style="width: 20px;height: 20px" class="rounded" src="~/content/Images/dowload-icon.png" />
                                            </a>
                                        </td>
                                        <td hidden>@item.SeriesLetterFile</td>
                                        <td>
                                            @item.SeriesLetterFileName
                                            <a href="/ThinkTool/Logistic/Picking/DownloadSeriesLetterFile/@item.Id">
                                                <img style="width: 20px;height: 20px" class="rounded" src="~/content/Images/dowload-icon.png" />
                                            </a>
                                        </td>
                                        <td>@item.Observation</td>
                                        <td>@item.TotalValue</td>
                                        <td><button onclick="removeInvoice(@line)">Remove</button></td>
                                    </tr>

                                    line++;
                                }
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="card" style="margin-bottom:10px">
        <h5 class="card-header" data-bs-toggle="collapse" href="#collapseThree" role="button" aria-expanded="true" aria-controls="collapseThree">Items</h5>
        <div class="no-padding accordion-collapse collapse show" id="collapseThree">
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-2">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Invoice Return
                                </strong>
                            </p>
                            @Html.DropDownListFor(model => model.PickingItem.Process, Model.PickingItem.Processes.Select(item => new SelectListItem
                   {
                       Value = item,
                       Text = item
                   }), "Select", new { @class = "form-control", @id = "itemProcess" })
                        </div>
                    </div>

                    <div class="col-sm-1">
                        <div class="form-group">
                            <p>
                                <strong>
                                    PN
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingItem.PartNumber, new { htmlAttributes = new { @class = "form-control", @id = "partNumber" } })
                        </div>
                    </div>


                    <div class="col-sm-2">
                        <div class="form-group">
                            <p>
                                <strong>
                                    MTM Description
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingItem.MTM, new { htmlAttributes = new { @class = "form-control", @id = "mtm" } })
                        </div>
                    </div>

                    <div class="col-sm-1">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Brand
                                </strong>
                            </p>
                            @Html.DropDownListFor(model => model.PickingItem.IdBrand, Model.PickingItem.Brands.Select(item => new SelectListItem
                   {
                       Value = item.Id.ToString(),
                       Text = item.Name
                   }), "Select", new { @class = "form-control", @id = "brand" })
                        </div>
                    </div>

                    <div class="col-sm-1">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Return Order
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingItem.ReturnOrder, new { htmlAttributes = new { @class = "form-control", @id = "returnOrder" } })
                        </div>
                    </div>

                    <div class="col-sm-2">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Origin Invoice
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingItem.OriginInvoive, new { htmlAttributes = new { @class = "form-control", @id = "originInvoice" } })
                        </div>
                    </div>

                    <div class="col-sm-1">
                        <div class="form-group">
                            <p>
                                <strong>
                                    Quantity
                                </strong>
                            </p>
                            @Html.EditorFor(model => model.PickingItem.Quantity, new { htmlAttributes = new { @class = "form-control", @id = "quantity" } })
                        </div>
                    </div>

                    <div class="col-sm-1" style="height:25px; margin-top: 40px">
                        <input name="command" value="Add" class="btn btn-primary" id="btnAddItem" />
                    </div>

                </div>

                <div class="row" style="margin-top:10px">

                    <table class="table table-striped table-bordered" id="ItemListId">
                        <thead>
                            <tr>
                                <th scope="col">Invoice Return</th>
                                <th scope="col">PN</th>
                                <th scope="col">MTM</th>
                                <th scope="col">Brand</th>
                                <th scope="col">Return Order</th>
                                <th scope="col">Origin Invoice</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Remove Item</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>

    <div align="right">
        <p>
            <input id="idSave" name="command" value="Save Picking" class="btn btn-success" />
            @Html.ActionLink("Back to List", "Index", new { id = "" }, new { @class = "btn btn-warning" })
        </p>
    </div>
}


<script>

    function removeInvoice(id) {
        var confirmed = confirm('Are you sure to remove this item?');
        if (!confirmed) {
            return;
        }

        $('#invoice' + id).remove();

    };

    function removeItem(id) {
        var confirmed = confirm('Are you sure to remove this item?');
        if (!confirmed) {
            return;
        }

        $('#item' + id).remove();

    };

    $("#btnAddInvoice").on("click", function () {
        var invoiceReturn = $('#invoiceReturn').val();
        var invoiceReturnDate = $('#invoiceReturnDate').val();
        var approvalFileName = $('#approvalFile')[0].files[0] ? $('#approvalFile')[0].files[0].name : "";
        var invoiceReturnName = $('#invoiceReturnFile')[0].files[0] ? $('#invoiceReturnFile')[0].files[0].name : "";
        var seriesLetterName = $('#seriesLetterFile')[0].files[0] ? $('#seriesLetterFile')[0].files[0].name : "";
        var observation = $('#observation').val();
        var totalValue = $('#totalValue').val();

        if (invoiceReturn === "" || invoiceReturnDate === "")
            return;

        var item = $("#InvoiceListId tbody tr").length + 1;

        $('#InvoiceListId tbody').append('<tr id="invoice' + item + '"><td hidden>'
            + 0 + '</td><td>'
            + invoiceReturn + '</td><td>'
            + invoiceReturnDate + '</td><td hidden>'
            + $("#approvalFile")[0].files[0] + '</td><td>'
            + approvalFileName + '</td><td hidden>'
            + $("#invoiceReturnFile")[0].files[0] + '</td><td>'
            + invoiceReturnName + '</td><td hidden>'
            + $("#seriesLetterFile")[0].files[0] + '</td><td>'
            + seriesLetterName + '</td><td>'
            + observation + '</td><td>'
            + totalValue + '</td><td><button onclick="removeInvoice(' + item + ')">Remove</button></td></tr>')

        let approvalFileOrigin = document.querySelector('#approvalFile');
        let clonedApprovalFileOrigin = approvalFileOrigin.cloneNode(true);
        clonedApprovalFileOrigin.id = 'approvalFile_' + item;
        clonedApprovalFileOrigin.hidden = true;

        let invoiceReturnFileOrigin = document.querySelector('#invoiceReturnFile');
        let clonedInvoiceReturnFileOrigin = invoiceReturnFileOrigin.cloneNode(true);
        clonedInvoiceReturnFileOrigin.id = 'invoiceReturnFile_' + item;
        clonedInvoiceReturnFileOrigin.hidden = true;

        let seriesLetterFileOrigin = document.querySelector('#seriesLetterFile');
        let clonedSeriesLetterFileOrigin = seriesLetterFileOrigin.cloneNode(true);
        clonedSeriesLetterFileOrigin.id = 'seriesLetterFile_' + item;
        clonedSeriesLetterFileOrigin.hidden = true;

        document.getElementById("invoice" + item).appendChild(clonedApprovalFileOrigin);
        document.getElementById("invoice" + item).appendChild(clonedInvoiceReturnFileOrigin);
        document.getElementById("invoice" + item).appendChild(clonedSeriesLetterFileOrigin);

        $('#itemProcess').append('<option value="1">' + invoiceReturn + '</option>')

        $('#idAlert').hide();

        $('#invoiceReturn').val("");
        $('#invoiceReturnDate').val("");
        $('#approvalFile').val("");
        $('#invoiceReturnFile').val("");
        $('#seriesLetterFile').val("");
        $('#observation').val("");
        $('#totalValue').val("");
    });

    $("#btnAddItem").on("click", function () {
        var process = $('#itemProcess option:selected').text();
        var partNumber = $('#partNumber').val();
        var mtm = $('#mtm').val();
        var idBrand = $('#brand option:selected').val();
        var brand = $('#brand option:selected').text();
        var returnOrder = $('#returnOrder').val();
        var originInvoice = $('#originInvoice').val();
        var quantity = $('#quantity').val();

        if (process === "" || partNumber === "" || mtm === "" || returnOrder === "" || originInvoice === "" || quantity === "")
            return;

        var item = $("#ItemListId tbody tr").length + 1;

        $('#ItemListId tbody').append('<tr id="item' + item + '"><td hidden>'
            + 0 + '</td><td>'
            + process + '</td><td>'
            + partNumber + '</td><td>'
            + mtm + '</td><td hidden>'
            + idBrand + '</td><td>'
            + brand + '</td><td>'
            + returnOrder + '</td><td>'
            + originInvoice + '</td><td>'
            + quantity + '</td><td><button onclick="removeItem(' + item + ')">Remove</button></td></tr>')

        $('#idAlert').hide();

        $('#itemProcess').val("");
        $('#partNumber').val("");
        $('#mtm').val("");
        $('#brand').val("");
        $('#returnOrder').val("");
        $('#originInvoice').val("");
        $('#quantity').val("");
    });

    $("#IdArea").on("click", function () {

        if ($('#IdArea').val() != '3') {
            $("#process").attr("disabled", "disabled");
        } else {
            $("#process").removeAttr("disabled");
        }
    });

    $("#idSave").on("click", function () {

        var createdOn = $('#createdOn').val();
        var createdBy = $('#createdBy').val();

        var idArea = $('#IdArea').val();
        var idProcessType = $('#IdProcessType').val();
        var process = $('#process').val();

        var client = $('#client').val();
        var city = $('#city').val();
        var uf = $('#uf').val();

        var contact = $("#contact").val();
        var email = $("#email").val();
        var telephone = $("#telephone").val();

        var reason = $("#reason").val();

        if (idArea === "") {
            $('#idAlert').text('Area must be choosen');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (idProcessType === "") {
            $('#idAlert').text('Process type must be choosen');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (client === "") {
            $('#idAlert').text('Client must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (city === "") {
            $('#idAlert').text('City must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (uf === "") {
            $('#idAlert').text('UF must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (contact === "") {
            $('#idAlert').text('Contact must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (email === "") {
            $('#idAlert').text('Email must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (telephone === "") {
            $('#idAlert').text('Telephone must be set');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        if (reason === "") {
            $('#idAlert').text('Reason must be choosen');

            $("#idAlert").parent().css("display", "block");
            $('#idAlert').show();
            return;
        }

        document.querySelectorAll('*').forEach(function (node) {
            node.style.cursor = 'wait';
        });

        var form = new FormData();
        form.append('Id', $('#Id').val());
        form.append('CreatedBy', createdBy);
        form.append('CreatedOn', createdOn);
        form.append('IdPickingArea', idArea);
        form.append('IdPickingProcessType', idProcessType);
        form.append('Process', process);
        form.append('Client', client);
        form.append('City', city);
        form.append('UF', uf);
        form.append('Contact', contact);
        form.append('Email', email);
        form.append('Telephone', telephone);
        form.append('Reason', reason);

        var invoicesIndex = 0;

        $.each($("#InvoiceListId tbody tr"), function (key, value) {

            var rowIndex = $(this)[0].id.toString().replace('invoice', '');

            var id = value.children[0].innerText;
            var invoiceReturn = value.children[1].innerText;
            var invoiceReturnDate = value.children[2].innerText;
            var approvalFile = $("#approvalFile")[0].files[0];
            var approvalFileName = value.children[4].innerText;
            var returnFile = $("#invoiceReturnFile")[0].files[0];
            var returnFileName = value.children[6].innerText;
            var seriesLetterFile = $("#seriesLetterFile")[0].files[0];
            var seriesLetterFileName = value.children[8].innerText;
            var observation = value.children[9].innerText;
            var totalValue = value.children[10].innerText;

            form.append(`Invoices[${invoicesIndex}].Id`, id);

            if (parseInt(id) === 0) {
                form.append(`Invoices[${invoicesIndex}].InvoiceReturn`, invoiceReturn);
                form.append(`Invoices[${invoicesIndex}].InvoiceReturnDate`, invoiceReturnDate);
                form.append(`Invoices[${invoicesIndex}].ApprovalFileName`, approvalFileName);
                form.append(`Invoices[${invoicesIndex}].ApprovalFile`, $("#approvalFile_" + rowIndex)[0].files[0]);
                form.append(`Invoices[${invoicesIndex}].ReturnFileName`, returnFileName);
                form.append(`Invoices[${invoicesIndex}].InvoiceReturnFile`, $("#invoiceReturnFile_" + rowIndex)[0].files[0]);
                form.append(`Invoices[${invoicesIndex}].SeriesLetterFileName`, seriesLetterFileName);
                form.append(`Invoices[${invoicesIndex}].SeriesLetterFile`, $("#seriesLetterFile_" + rowIndex)[0].files[0]);
                form.append(`Invoices[${invoicesIndex}].Observation`, observation);
                form.append(`Invoices[${invoicesIndex}].TotalValue`, totalValue);
            }

            invoicesIndex += 1;

        });

        var itemIndex = 0;

        $.each($("#ItemListId tbody tr"), function (key, value) {

            var rowIndex = $(this)[0].id.toString().replace('item', '');

            var id = value.children[0].innerText;
            var invoiceReturn = value.children[1].innerText;
            var partNumber = value.children[2].innerText;
            var mtm = value.children[3].innerText;
            var idBrand = value.children[4].innerText;
            var returnOrder = value.children[6].innerText;
            var originInvoice = value.children[7].innerText;
            var quantity = value.children[8].innerText;

            form.append(`Items[${itemIndex}].Id`, id);
            form.append(`Items[${itemIndex}].InvoiceReturn`, invoiceReturn);
            form.append(`Items[${itemIndex}].PartNumber`, partNumber);
            form.append(`Items[${itemIndex}].MTM`, mtm);
            form.append(`Items[${itemIndex}].IdBrand`, idBrand);
            form.append(`Items[${itemIndex}].ReturnOrder`, returnOrder);
            form.append(`Items[${itemIndex}].OriginInvoive`, originInvoice);
            form.append(`Items[${itemIndex}].Quantity`, quantity);

            itemIndex += 1;

        });

        $.ajax(
            {
                method: "POST",
                url: "/ThinkTool/Logistic/Picking/CreateNew",
                data: form, 
                contentType: false,
                processData: false,
                success: function (data) {
                    document.querySelectorAll('*').forEach(function (node) {
                        node.style.cursor = 'default';
                    });
                    location.href = "/ThinkTool/Logistic/Picking/Index";
                },
                error: function (error) {
                    alert(error);
                }
            });

    });

</script>