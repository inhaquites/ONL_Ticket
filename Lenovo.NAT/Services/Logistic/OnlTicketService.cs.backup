using AutoMapper;
using Lenovo.NAT.Infrastructure.Context;
using Lenovo.NAT.Infrastructure.Entities.Logistic;
using Lenovo.NAT.Infrastructure.Repositories.Logistic;
using Lenovo.NAT.ViewModel.Logistic.OnlTicket;
using Lenovo.NAT.ViewModel.Pagination;
using Microsoft.EntityFrameworkCore;

namespace Lenovo.NAT.Services.Logistic
{
    public interface IOnlTicketService
    {
        Task<PaginatedOnlTicketViewModel> GetPaginatedOnlTicketViewModel(OnlTicketFilter filterInfo, int pageSize, int page);
        Task<OnlTicketViewModel> GetOnlTicketDetail(int id);
        Task<OnlTicketViewModel> GetEmptyOnlTicket();
        Task<string> SaveOnlTicket(OnlTicketViewModel model);
        Task<string> UpdateOnlTicket(OnlTicketViewModel model);
        Task<string> DeleteOnlTicket(int id);
        Task<IEnumerable<OnlTicketOrderTypeViewModel>> GetOrderTypes();
        Task<IEnumerable<OnlTicketOrderStatusViewModel>> GetOrderStatuses();
        Task<IEnumerable<OnlTicketNFTypeViewModel>> GetNFTypes();
        Task<IEnumerable<OnlTicketCustomerSegmentViewModel>> GetCustomerSegments();
        Task<IEnumerable<CountryViewModel>> GetCountries();
        Task<IEnumerable<string>> GetSegments();
        Task<IEnumerable<string>> GetCustomerNames();
        Task<IEnumerable<string>> GetStatuses();
        Task<IEnumerable<string>> GetAssignToUsers();
        Task<IEnumerable<string>> GetAgingBuckets();
        Task<IEnumerable<string>> GetCreatedByUsers();
        
        // New methods for real data
        Task<IEnumerable<OnlTicket>> GetAllOnlTicketsAsync();
        Task<OnlTicket?> GetOnlTicketByIdAsync(int id);
        Task<OrderAttachment?> GetAttachmentByIdAsync(int id);
    }

    public class OnlTicketService : IOnlTicketService
    {
        private readonly IOnlTicketRepository _onlTicketRepository;
        private readonly IOrderNotLoadedRepository _orderNotLoadedRepository;
        private readonly IOrderSoldTORepository _orderSoldTORepository;
        private readonly IOrderShipToRepository _orderShipToRepository;
        private readonly IOrderProductRepository _orderProductRepository;
        private readonly IOrderAttachmentRepository _orderAttachmentRepository;
        private readonly IMapper _mapper;

        public OnlTicketService(
            IOnlTicketRepository onlTicketRepository,
            IOrderNotLoadedRepository orderNotLoadedRepository,
            IOrderSoldTORepository orderSoldTORepository,
            IOrderShipToRepository orderShipToRepository,
            IOrderProductRepository orderProductRepository,
            IOrderAttachmentRepository orderAttachmentRepository,
            IMapper mapper)
        {
            _onlTicketRepository = onlTicketRepository;
            _orderNotLoadedRepository = orderNotLoadedRepository;
            _orderSoldTORepository = orderSoldTORepository;
            _orderShipToRepository = orderShipToRepository;
            _orderProductRepository = orderProductRepository;
            _orderAttachmentRepository = orderAttachmentRepository;
            _mapper = mapper;
        }

        public async Task<PaginatedOnlTicketViewModel> GetPaginatedOnlTicketViewModel(OnlTicketFilter filterInfo, int pageSize, int page)
        {
            // TODO: Implementar busca real no banco de dados
            // Por enquanto, retornar dados de exemplo
            var onlTickets = new List<OnlTicketListViewModel>
            {
                new OnlTicketListViewModel
                {
                    Id = 1,
                    LogNumber = "LOG-001",
                    Customer = "Lenovo Brazil",
                    Segment = "Enterprise",
                    AssignTo = "User1",
                    OrderAging = "5 days",
                    AgingBucket = "0-7 days",
                    SAPOrder = "SAP-001",
                    TotalCAs = 3,
                    CreatedAt = DateTime.Now.AddDays(-5),
                    CreatedBy = "Admin",
                    EmailFrom = "user@lenovo.com",
                    UpdatedAt = DateTime.Now.AddDays(-1),
                    Status = "NEW"
                },
                new OnlTicketListViewModel
                {
                    Id = 2,
                    LogNumber = "LOG-002",
                    Customer = "Lenovo US",
                    Segment = "SMB",
                    AssignTo = "User2",
                    OrderAging = "12 days",
                    AgingBucket = "8-15 days",
                    SAPOrder = "SAP-002",
                    TotalCAs = 1,
                    CreatedAt = DateTime.Now.AddDays(-12),
                    CreatedBy = "User1",
                    EmailFrom = "admin@lenovo.com",
                    UpdatedAt = DateTime.Now.AddDays(-2),
                    Status = "Approved"
                }
            };

            // Calcular contadores
            var newCount = onlTickets.Count(x => x.Status == "NEW");
            var approvedCount = onlTickets.Count(x => x.Status == "Approved");
            var canceledNotPOCount = onlTickets.Count(x => x.Status == "Canceled / Not PO");
            var rejectCount = onlTickets.Count(x => x.Status == "Reject");
            var withoutAssignCount = onlTickets.Count(x => x.Status == "Without Assign");
            var withoutSAPOrderCount = onlTickets.Count(x => x.Status == "Without SAP Order");

            // Criar paginação
            var totalItems = onlTickets.Count;
            var totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            var paginationInfo = new PaginationInfo
            {
                Page = page,
                PageSize = pageSize,
                TotalItems = totalItems,
                TotalPages = totalPages,
                Previous = page <= 1 ? "disabled" : "",
                Next = page >= totalPages ? "disabled" : ""
            };

            filterInfo.TotalItems = totalItems;
            filterInfo.TotalPages = totalPages;
            filterInfo.Previous = paginationInfo.Previous;
            filterInfo.Next = paginationInfo.Next;

            var model = new PaginatedOnlTicketViewModel(paginationInfo, filterInfo, onlTickets)
            {
                NewCount = newCount,
                ApprovedCount = approvedCount,
                CanceledNotPOCount = canceledNotPOCount,
                RejectCount = rejectCount,
                WithoutAssignCount = withoutAssignCount,
                WithoutSAPOrderCount = withoutSAPOrderCount
            };

            return model;
        }

        public async Task<OnlTicketViewModel> GetOnlTicketDetail(int id)
        {
            // Buscar nas entidades Order
            var orderNotLoaded = await _orderNotLoadedRepository.GetOrderNotLoadedByIdAsync(id);
            if (orderNotLoaded == null)
                return null;

            var model = await MapOrderToViewModel(orderNotLoaded);
            await PopulateDropdowns(model);
            return model;
        }

        public async Task<OnlTicketViewModel> GetEmptyOnlTicket()
        {
            var model = new OnlTicketViewModel();
            await PopulateDropdowns(model);
            return model;
        }

        public async Task<string> SaveOnlTicket(OnlTicketViewModel model)
        {
            try
            {
                // Validar dados obrigatórios
                if (string.IsNullOrEmpty(model.LogNumber))
                    throw new ArgumentException("LogNumber é obrigatório");
                if (string.IsNullOrEmpty(model.CreatedBy))
                    throw new ArgumentException("CreatedBy é obrigatório");
                if (string.IsNullOrEmpty(model.Status))
                    throw new ArgumentException("Status é obrigatório");

                // Usar novo método que salva nas entidades Order
                return await SaveToOrderEntities(model);
            }
            catch (ArgumentException ex)
            {
                throw new Exception($"Dados inválidos: {ex.Message}", ex);
            }
            catch (Exception ex)
            {
                // Log detalhado do erro
                var innerMessage = ex.InnerException?.Message ?? "Nenhuma exceção interna";
                throw new Exception($"Erro ao salvar ONL Ticket: {ex.Message}. Detalhes: {innerMessage}", ex);
            }
        }

        public async Task<string> UpdateOnlTicket(OnlTicketViewModel model)
        {
            try
            {
                // Validar ID obrigatório
                if (string.IsNullOrEmpty(model.ID))
                    throw new ArgumentException("ID é obrigatório para atualização");

                // MIGRADO: Verificar se existe nas tabelas Order
                var orderId = long.Parse(model.ID);
                var existingOrder = await _orderNotLoadedRepository.GetOrderNotLoadedByIdAsync(orderId);
                if (existingOrder == null)
                    throw new ArgumentException("ONL Ticket não encontrado nas tabelas Order");

                // MIGRADO: Limpar registros relacionados existentes e recriar
                await _orderSoldTORepository.DeleteByOrderIdAsync(orderId);
                await _orderShipToRepository.DeleteByOrderIdAsync(orderId);
                await _orderProductRepository.DeleteByOrderIdAsync(orderId);
                
                // MIGRADO: Usar SaveToOrderEntities para salvar nas novas tabelas Order
                await SaveToOrderEntities(model);

                return "ONL Ticket atualizado com sucesso!";
            }
            catch (ArgumentException ex)
            {
                throw new Exception($"Dados inválidos: {ex.Message}", ex);
            }
            catch (Exception ex)
            {
                // Log detalhado do erro
                var innerMessage = ex.InnerException?.Message ?? "Nenhuma exceção interna";
                throw new Exception($"Erro ao atualizar ONL Ticket: {ex.Message}. Detalhes: {innerMessage}", ex);
            }
        }

        public async Task<string> DeleteOnlTicket(int id)
        {
            // TODO: Implementar exclusão no banco de dados
            return "ONL Ticket excluído com sucesso!";
        }

        public async Task<IEnumerable<OnlTicketOrderTypeViewModel>> GetOrderTypes() => _mapper.Map<IEnumerable<OnlTicketOrderTypeViewModel>>(await _orderNotLoadedRepository.GetAllOrderTypes());

        public async Task<IEnumerable<OnlTicketOrderStatusViewModel>> GetOrderStatuses() => _mapper.Map<IEnumerable<OnlTicketOrderStatusViewModel>>(await _orderNotLoadedRepository.GetAllOrderStatuses());
                            Bairro = soldToVm.Neighborhood,
                            Municipio = soldToVm.City,
                            CEP = soldToVm.PostalCode,
                            UF = soldToVm.State,
                            CreatedDate = DateTime.UtcNow,
                            CreatedBy = model.CreatedBy
                        };

                        // Mapear Ship To Addresses
                        if (soldToVm.ShipToAddresses != null && soldToVm.ShipToAddresses.Any())
                        {
                            foreach (var shipToVm in soldToVm.ShipToAddresses)
                            {
                                var shipTo = new OnlTicketShipTo
                                {
                                    CNPJ = shipToVm.CNPJ,
                                    Endereco = shipToVm.Address,
                                    Bairro = shipToVm.Neighborhood,
                                    Municipio = shipToVm.City,
                                    CEP = shipToVm.PostalCode,
                                    UF = shipToVm.State,
                                    SAPOrderNumber = shipToVm.SAPOrderNumber,
                                    CreatedDate = DateTime.UtcNow,
                                    CreatedBy = model.CreatedBy
                                };

                                // Mapear Order Items
                                if (shipToVm.OrderItems != null && shipToVm.OrderItems.Any())
                                {
                                    foreach (var orderItemVm in shipToVm.OrderItems)
                                    {
                                        var orderItem = new OnlTicketOrderItem
                                        {
                                            BidContractNumber = orderItemVm.BidContractNumber,
                                            PartNumber = orderItemVm.PartNumber,
                                            PartNumberDescription = orderItemVm.PartNumberDescription,
                                            Qty = orderItemVm.Qty,
                                            UnityNetPrice = orderItemVm.UnityNetPrice,
                                            UnitGrossPrice = orderItemVm.UnitGrossPrice,
                                            CreatedDate = DateTime.UtcNow,
                                            CreatedBy = model.CreatedBy
                                        };
                                        shipTo.OrderItems.Add(orderItem);
                                    }
                                }

                                soldTo.ShipToAddresses.Add(shipTo);
                            }
                        }

                        existingTicket.SoldToAddresses.Add(soldTo);
                    }
                }

                // Mapear SAP Orders
                if (model.SAPOrders != null && model.SAPOrders.Any())
                {
                    foreach (var sapOrderVm in model.SAPOrders)
                    {
                        var sapOrder = new OnlTicketSAPOrder
                        {
                            SAPOrderNumber = sapOrderVm.SAPOrderNumber,
                            DeliveryNumber = sapOrderVm.DeliveryNumber,
                            InvoiceNumber = sapOrderVm.InvoiceNumber,
                            NFNumber = sapOrderVm.NFNumber,
                            NFDate = sapOrderVm.NFDate,
                            NetAmount = sapOrderVm.NetAmount,
                            TotalOrderAmount = sapOrderVm.TotalOrderAmount,
                            CreatedDate = DateTime.UtcNow,
                            CreatedBy = model.CreatedBy
                        };
                        existingTicket.SAPOrders.Add(sapOrder);
                    }
                }

                // Mapear Comments
                if (model.Comments != null && model.Comments.Any())
                {
                    foreach (var comment in model.Comments)
                    {
                        if (!string.IsNullOrWhiteSpace(comment))
                        {
                            var commentEntity = new OnlTicketComment
                            {
                                Comment = comment,
                                CreatedDate = DateTime.UtcNow,
                                CreatedBy = model.CreatedBy
                            };
                            existingTicket.Comments.Add(commentEntity);
                        }
                    }
                }

                // Mapear Attachments
                if (model.Attachments != null && model.Attachments.Any())
                {
                    foreach (var attachmentVm in model.Attachments)
                    {
                        // Salvar attachment se pelo menos um campo estiver preenchido
                        if (!string.IsNullOrWhiteSpace(attachmentVm.CustomerPO) || 
                            !string.IsNullOrWhiteSpace(attachmentVm.Descricao) ||
                            !string.IsNullOrWhiteSpace(attachmentVm.Comentarios))
                        {
                            var attachment = new OnlTicketAttachment
                            {
                                CustomerPO = attachmentVm.CustomerPO ?? string.Empty,
                                Descricao = attachmentVm.Descricao ?? string.Empty,
                                Comentarios = attachmentVm.Comentarios ?? string.Empty,
                                CreatedDate = DateTime.UtcNow,
                                CreatedBy = model.CreatedBy
                            };
                            existingTicket.Attachments.Add(attachment);
                        }
                    }
                }

                // MIGRADO: Limpar registros relacionados existentes e recriar
                await _orderSoldTORepository.DeleteByOrderIdAsync(orderId);
                await _orderShipToRepository.DeleteByOrderIdAsync(orderId);
                await _orderProductRepository.DeleteByOrderIdAsync(orderId);
                
                // MIGRADO: Usar SaveToOrderEntities para salvar nas novas tabelas Order
                await SaveToOrderEntities(model);

                return "ONL Ticket atualizado com sucesso!";
            }
            catch (ArgumentException ex)
            {
                throw new Exception($"Dados inválidos: {ex.Message}", ex);
            }
            catch (Exception ex)
            {
                // Log detalhado do erro
                var innerMessage = ex.InnerException?.Message ?? "Nenhuma exceção interna";
                throw new Exception($"Erro ao atualizar ONL Ticket: {ex.Message}. Detalhes: {innerMessage}", ex);
            }
        }

        public async Task<string> DeleteOnlTicket(int id)
        {
            // TODO: Implementar exclusão no banco de dados
            return "ONL Ticket excluído com sucesso!";
        }

        public async Task<IEnumerable<OnlTicketOrderTypeViewModel>> GetOrderTypes() => _mapper.Map<IEnumerable<OnlTicketOrderTypeViewModel>>(await _orderNotLoadedRepository.GetAllOrderTypes());

        public async Task<IEnumerable<OnlTicketOrderStatusViewModel>> GetOrderStatuses() => _mapper.Map<IEnumerable<OnlTicketOrderStatusViewModel>>(await _orderNotLoadedRepository.GetAllOrderStatuses());

        public async Task<IEnumerable<OnlTicketNFTypeViewModel>> GetNFTypes() => _mapper.Map<IEnumerable<OnlTicketNFTypeViewModel>>(await _orderNotLoadedRepository.GetAllNFTypes());

        public async Task<IEnumerable<OnlTicketCustomerSegmentViewModel>> GetCustomerSegments() => _mapper.Map<IEnumerable<OnlTicketCustomerSegmentViewModel>>(await _orderNotLoadedRepository.GetAllCustomerSegments());
             
        public async Task<IEnumerable<CountryViewModel>> GetCountries() => _mapper.Map<IEnumerable<CountryViewModel>>(await _orderNotLoadedRepository.GetAllCountries());

        public async Task<IEnumerable<string>> GetSegments()
        {
            // TODO: Buscar do banco de dados quando a tabela estiver criada
            return new List<string>
            {
                "Enterprise",
                "SMB",
                "Consumer",
                "Government",
                "Education"
            };
        }

        public async Task<IEnumerable<string>> GetCustomerNames()
        {
            // TODO: Buscar do banco de dados quando a tabela estiver criada
            return new List<string>
            {
                "Lenovo Brazil",
                "Lenovo US",
                "Lenovo Europe",
                "Lenovo Asia Pacific",
                "Lenovo Latin America"
            };
        }

        public async Task<IEnumerable<string>> GetStatuses()
        {
            return new List<string>
            {
                "NEW",
                "Approved",
                "Canceled / Not PO",
                "Reject",
                "Without Assign",
                "Without SAP Order"
            };
        }

        public async Task<IEnumerable<string>> GetAssignToUsers()
        {
            // TODO: Buscar do banco de dados (tabela de usuários)
            return new List<string>
            {
                "User1",
                "User2",
                "User3",
                "User4",
                "User5"
            };
        }

        public async Task<IEnumerable<string>> GetAgingBuckets()
        {
            return new List<string>
            {
                "0-7 days",
                "8-15 days",
                "16-30 days",
                "31+ days"
            };
        }

        public async Task<IEnumerable<string>> GetCreatedByUsers()
        {
            // TODO: Buscar do banco de dados (tabela de usuários)
            return new List<string>
            {
                "Admin",
                "User1",
                "User2",
                "User3"
            };
        }

        private async Task PopulateDropdowns(OnlTicketViewModel model)
        {
            model.OrderTypes = (await GetOrderTypes()).ToList();
            model.OrderStatuses = (await GetOrderStatuses()).ToList();
            model.NFTypes = (await GetNFTypes()).ToList();
            model.CustomerSegments = (await GetCustomerSegments()).ToList();
            model.Countries = (await GetCountries()).ToList();
            model.Segments = (await GetSegments()).ToList();
            model.CustomerNames = (await GetCustomerNames()).ToList();
        }

        // New methods for real data - MIGRADO PARA TABELAS ORDER
        public async Task<IEnumerable<OnlTicket>> GetAllOnlTicketsAsync()
        {
            // Buscar dados das novas tabelas Order e mapear para OnlTicket (para compatibilidade com a listagem)
            var orderNotLoadedList = await _orderNotLoadedRepository.GetAllOrderNotLoadedAsync();
            
            var onlTicketList = new List<OnlTicket>();
            
            foreach (var order in orderNotLoadedList)
            {
                // Buscar dados relacionados
                var soldTos = await _orderSoldTORepository.GetByOrderIdAsync(order.Id);
                var shipTos = await _orderShipToRepository.GetByOrderIdAsync(order.Id);
                var products = await _orderProductRepository.GetByOrderIdAsync(order.Id);
                
                // Mapear para OnlTicket (compatibilidade)
                var onlTicket = new OnlTicket
                {
                    Id = (int)order.Id,
                    LogNumber = order.NumberOrder,
                    CreatedDate = order.CreatedOn,
                    CreatedBy = order.CreatedBy,
                    UpdatedDate = order.UpdatedOn,
                    UpdatedBy = order.UpdatedBy,
                    Status = order.OrderStatus,
                    EmailFrom = order.From,
                    AssignedOperator = order.AssignedTo,
                    PONumber = order.PONumber,
                    OrderType = order.OrderType,
                    OrderStatus = order.OrderStatus,
                    NFType = order.NFType,
                    CustomerName = order.Customer,
                    DMU = order.DMU,
                    Country = order.Country,
                    CountryId = order.IdCountry,
                    BU = order.BusinessUnit,
                    PODate = order.PODate,
                    Segment = order.Segment,
                    SegmentId = order.IdSegment,
                    BillAhead = order.BillAhead,
                    ISRName = order.ISRName,
                    Region = order.Region,
                    UF = order.State,
                    ReplacementType = order.RecolocationType,
                    
                    // Mapear relacionamentos
                    SoldToAddresses = soldTos.Select(st => new OnlTicketSoldTo
                    {
                        Id = st.Id,
                        CNPJ = st.CompanyTaxId,
                        Endereco = st.Address,
                        Bairro = st.Neighborhood,
                        Municipio = st.City,
                        CEP = st.PostalCode,
                        UF = st.State
                    }).ToList(),
                    
                    SAPOrders = new List<OnlTicketSAPOrder>() // Vazio por enquanto
                };
                
                onlTicketList.Add(onlTicket);
            }
            
            return onlTicketList;
        }

        public async Task<OnlTicket?> GetOnlTicketByIdAsync(int id)
        {
            // Buscar nas novas tabelas Order
            var order = await _orderNotLoadedRepository.GetOrderNotLoadedByIdAsync(id);
            if (order == null) return null;
            
            // Buscar dados relacionados
            var soldTos = await _orderSoldTORepository.GetByOrderIdAsync(order.Id);
            var shipTos = await _orderShipToRepository.GetByOrderIdAsync(order.Id);
            var products = await _orderProductRepository.GetByOrderIdAsync(order.Id);
            
            // Mapear para OnlTicket (compatibilidade)
            var onlTicket = new OnlTicket
            {
                Id = (int)order.Id,
                LogNumber = order.NumberOrder,
                CreatedDate = order.CreatedOn,
                CreatedBy = order.CreatedBy,
                UpdatedDate = order.UpdatedOn,
                UpdatedBy = order.UpdatedBy,
                Status = order.OrderStatus,
                EmailFrom = order.From,
                AssignedOperator = order.AssignedTo,
                PONumber = order.PONumber,
                OrderType = order.OrderType,
                OrderStatus = order.OrderStatus,
                NFType = order.NFType,
                CustomerName = order.Customer,
                DMU = order.DMU,
                Country = order.Country,
                CountryId = order.IdCountry,
                BU = order.BusinessUnit,
                PODate = order.PODate,
                Segment = order.Segment,
                SegmentId = order.IdSegment,
                BillAhead = order.BillAhead,
                ISRName = order.ISRName,
                Region = order.Region,
                UF = order.State,
                ReplacementType = order.RecolocationType,
                
                // Mapear relacionamentos
                SoldToAddresses = soldTos.Select(st => new OnlTicketSoldTo
                {
                    Id = st.Id,
                    CNPJ = st.CompanyTaxId,
                    Endereco = st.Address,
                    Bairro = st.Neighborhood,
                    Municipio = st.City,
                    CEP = st.PostalCode,
                    UF = st.State,
                    
                    ShipToAddresses = shipTos.Where(sh => sh.IdOrderSoldTo == st.Id)
                        .Select(sh => new OnlTicketShipTo
                        {
                            Id = sh.Id,
                            CNPJ = sh.CompanyTaxId,
                            Endereco = sh.Address,
                            Bairro = sh.Neighborhood,
                            Municipio = sh.City,
                            CEP = sh.PostalCode,
                            UF = sh.State,
                            SAPOrderNumber = sh.SapOrder,
                            
                            OrderItems = products.Where(p => p.IdOrderShipTo == sh.Id)
                                .Select(p => new OnlTicketOrderItem
                                {
                                    Id = p.Id,
                                    BidContractNumber = p.BID,
                                    PartNumber = p.PartNumber,
                                    PartNumberDescription = p.MTMDescription,
                                    Qty = p.Quantity,
                                    UnityNetPrice = p.UnitNetPrice,
                                    UnitGrossPrice = p.UnitGrossPrice
                                }).ToList()
                        }).ToList()
                }).ToList(),
                
                SAPOrders = new List<OnlTicketSAPOrder>() // Vazio por enquanto
            };
            
            return onlTicket;
        }

        // ========================================
        // MÉTODOS DE MAPEAMENTO PARA ENTIDADES ORDER
        // ========================================

        private async Task<OnlTicketViewModel> MapOrderToViewModel(OrderNotLoaded orderNotLoaded)
        {
            // Buscar entidades relacionadas
            var soldTos = await _orderSoldTORepository.GetByOrderIdAsync(orderNotLoaded.Id);
            var shipTos = await _orderShipToRepository.GetByOrderIdAsync(orderNotLoaded.Id);
            var products = await _orderProductRepository.GetByOrderIdAsync(orderNotLoaded.Id);
            var attachments = await _orderAttachmentRepository.GetByOrderIdAsync(orderNotLoaded.Id);

            var model = new OnlTicketViewModel
            {
                ID = orderNotLoaded.Id.ToString(),
                LogNumber = orderNotLoaded.NumberOrder,
                CreatedDate = orderNotLoaded.CreatedOn,
                CreatedBy = orderNotLoaded.CreatedBy,
                UpdatedDate = orderNotLoaded.UpdatedOn,
                UpdatedBy = orderNotLoaded.UpdatedBy,
                Status = orderNotLoaded.OrderStatus,
                EmailFrom = orderNotLoaded.From,
                AssignedOperator = orderNotLoaded.AssignedTo,
                PONumber = orderNotLoaded.PONumber,
                
                // CORRIGIDO: Usar IDs para os dropdowns selecionarem corretamente
                OrderType = orderNotLoaded.IdOrderType?.ToString() ?? "1",
                OrderStatus = orderNotLoaded.IdOrderStatus?.ToString() ?? "1", 
                NFType = orderNotLoaded.IdNFType?.ToString() ?? "1",
                Segment = orderNotLoaded.IdSegment?.ToString() ?? "1",
                
                CustomerName = orderNotLoaded.Customer,
                DMU = orderNotLoaded.DMU,
                Country = orderNotLoaded.Country,
                CountryId = orderNotLoaded.IdCountry,
                BU = orderNotLoaded.BusinessUnit,
                PODate = orderNotLoaded.PODate,
                SegmentId = orderNotLoaded.IdSegment,
                BillAhead = orderNotLoaded.BillAhead,
                ISRName = orderNotLoaded.ISRName,
                Region = orderNotLoaded.Region,
                UF = orderNotLoaded.State,
                ReplacementType = orderNotLoaded.RecolocationType
            };

            // Mapear SoldTo Addresses
            model.SoldToAddresses = new List<SoldToViewModel>();
            foreach (var soldTo in soldTos)
            {
                var soldToVm = new SoldToViewModel
                {
                    CNPJ = soldTo.CompanyTaxId,
                    Address = soldTo.Address,
                    Neighborhood = soldTo.Neighborhood,
                    City = soldTo.City,
                    PostalCode = soldTo.PostalCode,
                    State = soldTo.State,
                    ShipToAddresses = new List<ShipToViewModel>()
                };

                // Mapear ShipTo Addresses para este SoldTo
                var soldToShipTos = shipTos.Where(s => s.IdOrderSoldTo == soldTo.Id);
                foreach (var shipTo in soldToShipTos)
                {
                    var shipToVm = new ShipToViewModel
                    {
                        CNPJ = shipTo.CompanyTaxId,
                        Address = shipTo.Address,
                        Neighborhood = shipTo.Neighborhood,
                        City = shipTo.City,
                        PostalCode = shipTo.PostalCode,
                        State = shipTo.State,
                        SAPOrderNumber = shipTo.SapOrder,
                        OrderItems = new List<OrderItemViewModel>()
                    };

                    // Mapear Order Items para este ShipTo
                    var shipToProducts = products.Where(p => p.IdOrderShipTo == shipTo.Id);
                    foreach (var product in shipToProducts)
                    {
                        var orderItemVm = new OrderItemViewModel
                        {
                            BidContractNumber = $"{product.BID}_{product.ContractNumber}",
                            PartNumber = product.PartNumber,
                            PartNumberDescription = product.MTMDescription,
                            Qty = product.Quantity,
                            UnityNetPrice = product.UnitNetPrice,
                            UnitGrossPrice = product.UnitGrossPrice
                        };
                        shipToVm.OrderItems.Add(orderItemVm);
                    }

                    soldToVm.ShipToAddresses.Add(shipToVm);
                }

                model.SoldToAddresses.Add(soldToVm);
            }

            // Mapear Attachments
            model.Attachments = new List<OnlTicketAttachmentViewModel>();
            foreach (var attachment in attachments)
            {
                var attachmentVm = new OnlTicketAttachmentViewModel
                {
                    Id = attachment.Id,
                    CustomerPO = attachment.PONumber,
                    Descricao = attachment.Description,
                    Comentarios = attachment.Comments
                };
                model.Attachments.Add(attachmentVm);
            }

            return model;
        }

        private async Task<string> SaveToOrderEntities(OnlTicketViewModel model)
        {
            try
            {
                Console.WriteLine("=== INICIANDO SAVE TO ORDER ENTITIES ===");
                
                // Buscar IDs válidos para chaves estrangeiras
                var validOrderStatus = await _orderNotLoadedRepository.GetAllOrderStatuses();
                var validOrderTypes = await _orderNotLoadedRepository.GetAllOrderTypes();
                var validNFTypes = await _orderNotLoadedRepository.GetAllNFTypes();
                var validCustomerSegments = await _orderNotLoadedRepository.GetAllCustomerSegments();
                var validCountries = await _orderNotLoadedRepository.GetAllCountries();
                
                var defaultOrderStatusId = validOrderStatus.FirstOrDefault()?.Id ?? 1;
                var defaultOrderTypeId = validOrderTypes.FirstOrDefault()?.Id ?? 1;
                var defaultNFTypeId = validNFTypes.FirstOrDefault()?.Id ?? 1;
                var defaultSegmentId = validCustomerSegments.FirstOrDefault()?.Id ?? 1;
                var defaultCountryId = validCountries.FirstOrDefault()?.Id ?? Guid.NewGuid();
                
                Console.WriteLine($"IDs válidos encontrados: OrderStatus={defaultOrderStatusId}, OrderType={defaultOrderTypeId}, NFType={defaultNFTypeId}");
                
                // Buscar IDs específicos dos dropdowns selecionados
                var selectedOrderTypeId = TryParseInt(model.OrderType) ?? defaultOrderTypeId;
                var selectedOrderStatusId = TryParseInt(model.OrderStatus) ?? defaultOrderStatusId;
                var selectedNFTypeId = TryParseInt(model.NFType) ?? defaultNFTypeId;
                var selectedSegmentId = TryParseInt(model.Segment) ?? model.SegmentId ?? defaultSegmentId;
                
                Console.WriteLine($"IDs selecionados: OrderType={selectedOrderTypeId}, OrderStatus={selectedOrderStatusId}, NFType={selectedNFTypeId}, Segment={selectedSegmentId}");
                
                // Buscar textos correspondentes aos IDs selecionados
                var selectedOrderTypeText = validOrderTypes.FirstOrDefault(x => x.Id == selectedOrderTypeId)?.Name ?? model.OrderType ?? "";
                var selectedOrderStatusText = validOrderStatus.FirstOrDefault(x => x.Id == selectedOrderStatusId)?.Name ?? model.OrderStatus ?? "";
                var selectedNFTypeText = validNFTypes.FirstOrDefault(x => x.Id == selectedNFTypeId)?.Name ?? model.NFType ?? "";
                var selectedSegmentText = validCustomerSegments.FirstOrDefault(x => x.Id == selectedSegmentId)?.Name ?? model.Segment ?? "";
                var selectedCountryText = validCountries.FirstOrDefault(x => x.Id == model.CountryId)?.Name ?? model.Country ?? "";
                
                Console.WriteLine($"Textos encontrados: OrderType='{selectedOrderTypeText}', OrderStatus='{selectedOrderStatusText}', NFType='{selectedNFTypeText}', Segment='{selectedSegmentText}', Country='{selectedCountryText}'");
                // 1. Criar OrderNotLoaded
                var orderNotLoaded = new OrderNotLoaded
                {
                    NumberOrder = model.LogNumber ?? "ONL-" + DateTime.Now.Ticks,
                    CreatedBy = model.CreatedBy ?? "System",
                    UpdatedBy = model.UpdatedBy ?? "System",
                    OrderStatus = selectedOrderStatusText,
                    From = model.EmailFrom ?? "",
                    AssignedTo = model.AssignedOperator ?? "",
                    PONumber = model.PONumber ?? "",
                    OrderType = selectedOrderTypeText,
                    NFType = selectedNFTypeText,
                    Customer = model.CustomerName ?? "",
                    DMU = model.DMU ?? "",
                    Country = selectedCountryText,
                    IdCountry = model.CountryId,
                    BusinessUnit = model.BU ?? "",
                    PODate = model.PODate ?? DateTime.UtcNow,
                    Segment = selectedSegmentText,
                    IdSegment = selectedSegmentId,
                    BillAhead = model.BillAhead ?? "",
                    ISRName = model.ISRName ?? "",
                    Region = model.Region ?? "",
                    State = model.UF ?? "",
                    RecolocationType = model.ReplacementType ?? "",
                    Subject = "ONL Ticket",
                    EmailResolutionOwner = model.CreatedBy ?? "System",
                    IdOrderStatus = selectedOrderStatusId, // Usar ID do dropdown selecionado
                    IdBusinessUnit = null, // NULL para evitar FK constraint
                    IdNFType = selectedNFTypeId, // Usar ID do dropdown selecionado
                    IdCustomer = null, // NULL para evitar FK constraint
                    IdOrderType = selectedOrderTypeId, // Usar ID do dropdown selecionado
                    IdCancelReason = null, // NULL para evitar FK constraint
                    CancelReason = ""
                };

                Console.WriteLine("=== SALVANDO OrderNotLoaded ===");
                var createdOrder = await _orderNotLoadedRepository.CreateOrderNotLoadedAsync(orderNotLoaded);
                Console.WriteLine($"✓ OrderNotLoaded criado com ID: {createdOrder.Id}");

                // 2. Salvar SoldTo, ShipTo e Products
                if (model.SoldToAddresses != null && model.SoldToAddresses.Any())
                {
                    foreach (var soldToVm in model.SoldToAddresses)
                    {
                        var orderSoldTo = new OrderSoldTO
                        {
                            IdOrderNotLoaded = createdOrder.Id,
                            CompanyTaxId = soldToVm.CNPJ ?? "",
                            Address = soldToVm.Address ?? "",
                            Neighborhood = soldToVm.Neighborhood ?? "",
                            City = soldToVm.City ?? "",
                            PostalCode = soldToVm.PostalCode ?? "",
                            State = soldToVm.State ?? "",
                            CreatedBy = model.CreatedBy ?? "System"
                        };

                        Console.WriteLine($"=== SALVANDO OrderSoldTO para Order ID: {createdOrder.Id} ===");
                        var createdSoldTo = await _orderSoldTORepository.CreateAsync(orderSoldTo);
                        Console.WriteLine($"✓ OrderSoldTO criado com ID: {createdSoldTo.Id}");

                        // Salvar ShipTo
                        if (soldToVm.ShipToAddresses != null && soldToVm.ShipToAddresses.Any())
                        {
                            foreach (var shipToVm in soldToVm.ShipToAddresses)
                            {
                                var orderShipTo = new OrderShipTo
                                {
                                    IdOrderNotLoaded = createdOrder.Id,
                                    IdOrderSoldTo = createdSoldTo.Id,
                                    CompanyTaxId = shipToVm.CNPJ ?? "",
                                    Address = shipToVm.Address ?? "",
                                    Neighborhood = shipToVm.Neighborhood ?? "",
                                    City = shipToVm.City ?? "",
                                    PostalCode = shipToVm.PostalCode ?? "",
                                    State = shipToVm.State ?? "",
                                    SapOrder = shipToVm.SAPOrderNumber ?? "",
                                    SapOrderService = "",
                                    CreatedBy = model.CreatedBy ?? "System"
                                };

                                var createdShipTo = await _orderShipToRepository.CreateAsync(orderShipTo);

                                // Salvar Products
                                if (shipToVm.OrderItems != null && shipToVm.OrderItems.Any())
                                {
                                    foreach (var orderItemVm in shipToVm.OrderItems)
                                    {
                                        // Separar BID e ContractNumber
                                        var bidContract = orderItemVm.BidContractNumber?.Split('_') ?? new[] { "", "" };
                                        
                                        var orderProduct = new OrderProduct
                                        {
                                            IdOrderShipTo = createdShipTo.Id,
                                            BID = bidContract.Length > 0 ? bidContract[0] : "",
                                            ContractNumber = bidContract.Length > 1 ? bidContract[1] : "",
                                            PartNumber = orderItemVm.PartNumber ?? "",
                                            MTMDescription = orderItemVm.PartNumberDescription ?? "",
                                            Quantity = orderItemVm.Qty ?? 0,
                                            UnitNetPrice = orderItemVm.UnityNetPrice ?? 0,
                                            UnitGrossPrice = orderItemVm.UnitGrossPrice ?? 0,
                                            CreatedBy = model.CreatedBy ?? "System"
                                        };

                                        await _orderProductRepository.CreateAsync(orderProduct);
                                    }
                                }
                            }
                        }
                    }
                }

                // 3. Salvar Attachments
                if (model.Attachments != null && model.Attachments.Any())
                {
                    foreach (var attachmentVm in model.Attachments)
                    {
                        var orderAttachment = new OrderAttachment
                        {
                            IdOrderNotLoaded = createdOrder.Id,
                            PONumber = attachmentVm.CustomerPO ?? "",
                            Description = attachmentVm.Descricao ?? "",
                            Comments = attachmentVm.Comentarios ?? "",
                            AttachemntFileName = "temp.txt",
                            Attachment = new byte[0],
                            CreatedBy = model.CreatedBy ?? "System",
                            FileExtension = ".txt",
                            UpdatedBy = model.CreatedBy ?? "System"
                        };

                        await _orderAttachmentRepository.CreateAsync(orderAttachment);
                    }
                }

                return createdOrder.Id.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"=== ERRO DETALHADO ===");
                Console.WriteLine($"Erro: {ex.Message}");
                Console.WriteLine($"InnerException: {ex.InnerException?.Message}");
                Console.WriteLine($"StackTrace: {ex.StackTrace}");
                
                var detailedMessage = ex.InnerException?.Message ?? ex.Message;
                throw new Exception($"Erro ao salvar nas entidades Order: {detailedMessage}", ex);
            }
        }

        public async Task<OrderAttachment?> GetAttachmentByIdAsync(int id)
        {
            return await _orderAttachmentRepository.GetByIdAsync(id);
        }


        private int? TryParseInt(string? value)
        {
            if (string.IsNullOrEmpty(value)) return null;
            if (int.TryParse(value, out int result)) return result;
            return null;
        }
    }
}
